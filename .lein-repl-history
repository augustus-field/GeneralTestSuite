(System/currentTimeMillis)
(Integer.MAX_VALUE)
(Integer/MAX_VALUE)
*ns*
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.db)
(get-selections)
(use :reload-all 'GeneralTestSuite.db)
(get-selections)
(def s {1 2 3})
(def s #{1 2 3})
s
(def s #{1 2 3})
(use :reload-all 'GeneralTestSuite.db)
(get-selections)
(use :reload-all 'GeneralTestSuite.db)
(class (get-selections))
(use :reload-all 'GeneralTestSuite.db)
(class (get-selections))
(use :reload-all 'GeneralTestSuite.db)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.db)
(get-selections)
(use :reload-all 'GeneralTestSuite.db)
(get-selections)
(use :reload-all 'GeneralTestSuite.db)
(get-selections)
(use :reload-all 'GeneralTestSuite.db)
(get-selections)
(doc j/with-query-result)
(doc j/with-query-results)
(source j/with-query-results)
(doc where)
(System/currentTimeMillis)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(def d (.Date))
(def d (Date.))
(Date. )
(java.util.Date. )
(def d (java.util.Date. ))
(d/getTime)
(d. getTime)
(.getTime d)
(System/currentTimeMillis)
(= (System/currentTimeMillis) (System/currentTimeMillis))
(= (System/currentTimeMillis) (.getTime (Date.))
)
(= (System/currentTimeMillis) (.getTime (java.util.Date.)))
(.getTime (Date.))
(.getTime (java.util.Date.))
eixt
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(defn reduce)
(doc reduce)
(def m [1 2])
(def n [2 3 4])
(reduce + m n)
(reduce + m )
(reduce + n )
(reduce + 1 n )
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(doc update-in)
(doc fnil)
(fnil 2)
(fnil inc 2)
((fnil inc 2) 3)
((fnil inc 2 3) 3)
((fnil inc 2 ) 3)
((fnil inc ) 3)
((fnil inc 4) 3)
((fnil inc 4) nil)
(doc update-in)
(defn ms [m v] (+ m v))
(ms 2 3)
(def m [1 2 3 4 5 6])
(reduce ms m)
(reduce ms {} m)
(reduce ms {0} m)
(doc are)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.forsync)
(use :reload-all 'GeneralTestSuite.foresync)
(list-files (list-dir ".") )
(use :reload-all 'GeneralTestSuite.foresync)
(doc write-log)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(doc conj)
(doc cons)
(rest '(1 2 3))
(use :reload-all 'GeneralTestSuite.foresync)
(list-files (list-dir "."))
(cons {:a 1 :b 2} '())
(cons {:a 1 :b 2} '(a b))
(cons {:a nil :b 2} '(a b))
(use :reload-all 'GeneralTestSuite.foresync)
(list-files (list-dir "."))
(nil? '())
(zero? '())
(empty? '())
(use :reload-all 'GeneralTestSuite.foresync)
(list-files (list-dir "."))
(class (list-files (list-dir ".")))
(pprint (list-files (list-dir ".")))
(use :reload-all 'GeneralTestSuite.foresync)
(list-files ".")
(list-files ".git")
(list-files "project.clj")
(use :reload-all 'GeneralTestSuite.foresync)
(list-files "project.clj")
(use :reload-all 'GeneralTestSuite.foresync)
(list-files "project.clj")
(list-files ".")
(list-dir ".")
(class (as-file "."))
(use :reload-all 'GeneralTestSuite.foresync)
(class (as-file "."))
(class (clojure.io/as-file "."))
(class (clojure.java.io/as-file "."))
(use :reload-all 'GeneralTestSuite.foresync)
(list-dir ".")
(doc cond)
(use :reload-all 'GeneralTestSuite.foresync)
(list-dir ".")
(list-files ".")
(pprint (list-files "."))
(pprint (list-files "project.clj"))
(file-seq (as-file "."))
(file-seq (file "."))
(file-seq (as-file "."))
(use :reload-all 'GeneralTestSuite.foresync)
(file-seq (as-file "."))
(file-seq (clojure.java.io/as-file "."))
(count (file-seq (clojure.java.io/as-file ".")))
(doc file-seq)\
(doc file-seq)
(use :reload-all 'GeneralTestSuite.foresync)
(list-files ".")
(pprint (list-files "."))
(doc file-seq)
(doc write-log)
(use :reload-all 'GeneralTestSuite.foresync)
(Date. )
(Date. 0)
(java.util.Date. )
(doc write-log)
(write-log (list-files ".") "curr.log" false)
(write-log (list-files ".") "curr.log" true)
(java.util.Date.)
(doc doto)
(doc ->)
(use :reload-all 'GeneralTestSuite.foresync)
(SimpleDateFormat.)
(java.text.SimpleDateFormat.)
(doto (java.text.SimpleDateFormat. "yyyy-MM-dd'T'HH:mm:ss.SSSZ") (.format (java.util.Date.)))
(doto (java.text.SimpleDateFormat. "yyyy-MM-dd'T'HH:mm:ss.SSSZ") (println (.format (java.util.Date.))))
(doto (java.text.SimpleDateFormat. "yyyy-MM-dd'T'HH:mm:ss.SSSZ") (.format (java.util.Date.)) println)
(doto (new java.text.SimpleDateFormat "yyyy-MM-dd'T'HH:mm:ss.SSSZ") (.format (java.util.Date.)))
(doto (new java.text.SimpleDateFormat "yyyy-MM-dd'T'HH:mm:ss.SSSZ") (.format (java.util.Date.)) print)
(def sdf (doto (java.text.SimpleDateFormat. "yyyy-MM-dd'T'HH:mm:ss.SSSZ") (.format (java.util.Date.))))
sdf
(java.util.Date.)
(.format (java.text.SimpleDateFormat.) (java.util.Date.))
(.format (java.text.SimpleDateFormat. "yyyy-MM-dd'T'HH:mm:ss.SSSZ") (java.util.Date.))
(use :reload-all 'GeneralTestSuite.foresync)
sdf-test
(use :reload-all 'GeneralTestSuite.foresync)
sdf-test
(class sdf-test)
(doc doto)
(use :reload-all 'GeneralTestSuite.foresync)
sdf-test
(doc write-log)
(use :reload-all 'GeneralTestSuite.foresync)
(write-dirinfo-log "." 1.7)
(time (write-dirinfo-log "." 1.7))
*ns*
(use :reload-all 'GeneralTestSuite.foresync)
(pprint (list-files "."))
eix
texit
