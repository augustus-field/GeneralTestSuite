(get-rand-tradable-id )
(time (use :reload-all 'GeneralTestSuite.basic))
(get-rand-tradable-id )
(get-rand-tradable-id (:use-local-db (:login-remote login-routes) ))
(-main)
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(time (use :reload-all 'GeneralTestSuite.basic))
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(doc request)
(doc request-get)
(source request-get)
(source request-post)
(source client/get)
(source client/request)
(use :reload-all 'GeneralTestSuite.basic)
(doc slurp*)
(doc slurp)
(doc clojure.io/slurp*)
(doc clojure.java.io/as-url)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.config)
(doc request-get)
(doc client/get)
(source client/get)
(client/get "https://google.com")
(pprint (client/get "https://google.com"))
(pprint (client/get "https://localhost:8443/SgfmApi/apiTest.jsp"))
(use :reload-all 'GeneralTestSuite.config)
(pprint (client/get "https://localhost:8443/SgfmApi/apiTest.jsp"))
(pprint (client/get "https://localhost:8443/SgfmApi/apiTest.jsp") {:insecure? true})
(pprint (client/get "https://172.17.108.64:8443/SgfmApi/apiTest.jsp") {:insecure? true})
(pprint (client/get "https://alioth.debian.org" {:insecure? true}))
(use :reload-all 'GeneralTestSuite.util)
(-main)
(pprint (client/get "https://172.17.108.64:8443/SgfmApi/apiTest.jsp") {:insecure? true})
(pprint (client/get "https://localhost:8443/SgfmApi/apiTest.jsp") {:insecure? true})
(doc update-in)
(pprint (client/get "https://localhost:8443") {:insecure? true})
(source client/get)
(pprint (client/get "http://localhost:8080") {:insecure? true})
(pprint (client/get "http://localhost:8080") )
(pprint (client/get "http://localhost:8080"))
(pprint (client/get "http://localhost:8084"))
(pprint (client/get "https://localhost:8443") )
(pprint (client/get "https://localhost:8443") {:insecure? true} )
(dodc reify)
(doc reify)
(pprint (client/get "https://localhost:8443") {:insecure? true} )
(pprint (client/get "https://localhost:8443") {:insecure? false} )
(pprint (client/get "https://localhost:8443") {:insecure? true} )
(pprint (client/get "http://www.yandex.com") {:insecure? true} )
(pprint (client/get "http://www.yandex.com")  )
(pprint (client/get "https://www.google.co.uk")  )
(pprint (client/get "https://localhost:8443") {:insecure? true} )
(use :reload-all 'GeneralTestSuite.util)
(pprint (client/get "https://testks:8443") {:insecure? true} )
(pprint (client/get "https://localhost:8443") {:insecure? true} )
(pprint (client/get "https://localhost:8443" {:insecure? true} ))
(time (use :reload-all 'GeneralTestSuite.util))
(pprint (client/get "https://localhost:8443" ))
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(time (-main))
(doc to-array)
(doc into-array)
(reduce (fn [m [k v]] (assoc m k v))
{} (map vector keys vals))
(doc reduce)
(map [1 2 3] '(a b c) '(d e f))
(doc map)
(map vector '(a b c) '(d e f))
(reduce (fn [m [k v]] (assoc m k v)) {} (map vector '(:a :b :c) (1 2 3)))
(reduce (fn [m [k v]] (assoc m k v)) {} (map vector '(:a :b :c) '(1 2 3)))
(doc interleave)
(interleave '(:a :b) '(1 2))
(doc hash-map)
(hash-map (interleave '(:a :b) '(1 2)))
(apply hash-map (interleave '(:a :b) '(1 2)))
(doc apply)
(hash-map '(1 2))
(hash-map 1 2)
(doc into)
(into {} (map vector '(:a :b :c) (1 2 )))
(into {} (map vector '(:a :b :c) (1 2 3)))
(into {} (map vector '(:a :b :c) '(1 2 3)))
(into {} (map vector '(:a :b :c) '(1 2 )))
(doc zipmap)
(zipmap '(:a :b :c) '(1 2 ))
(zipmap '(:a :b :c) '(1 2 3))
(source zipmap)
(doc promise)
(time (use :reload-all 'GeneralTestSuite.util))
(-main)
(time (use :reload-all 'GeneralTestSuite.util))
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(java.util.Date. 1369706124000)
(doc clojure.core)
(:doc clojure.core)
(:doc 'clojure.core)
(doc meta)
(meta clojure.core)
(-main)
(use :reload-all 'GeneralTestSuite.db)
(query-for-order-ids pool-tt 'fbbbcc)
(use :reload-all 'GeneralTestSuite.db)
(query-for-order-ids pool-tt 'fbbbcc)
(query-for-selections pool-tt)
(query-for-order-ids pool-tt 'fbbbcc)
(use :reload-all 'GeneralTestSuite.db)
(query-for-order-ids pool-tt 'fbbbcc)
(use :reload-all 'GeneralTestSuite.db)
(query-for-order-ids pool-tt 'fbbbcc)
(doc map)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(print-cause-trace *e 5)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(query-for-order-ids pool-tt 'fbbbcc)
(rand-nth (query-for-order-ids pool-tt 'fbbbcc))
(class (rand-nth (query-for-order-ids pool-tt 'fbbbcc)))
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(java.util.Date. 1369713484586)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(doc clojure.zip)
(require 'clojure.zip)
(doc clojure.zip)
(doc clojure.zip/zipper)
(doc meta)
(meta clojure.zip/zipper)
(meta clojure.zip)
(source clojure.zip)
(doc replace)
(use :reload-all 'GeneralTestSuite.db)
(query-for-match-ids pool-tt)
(use :reload-all 'GeneralTestSuite.config)
(get-rand-matchid pool-tt)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(doc ~=)
(doc =)
(doc !)
(doc not=)
(def s '(:a :b))
(doc contains?)
(contains? s :a)
(contains? s ':a)
s
(contains? s 1)
(doc remove)
(remove (partial = :a) s)
(defn rmkey [key coll] (remove (partial = key) coll))
(rmkey :a s)
(defn keys '(:a :b))
(def keys '(:a :b))
(def ks '(:a :b))
(def s '(:a :b :c :d))
s
ks
(doc reduce)
(doc remove)
(remove rmkey s)
(doc every)
(doc every?)
(defn ksexist? [k] (every? (partial = k) ks))
(ksexist? :a)
(doc some?)
(defn ksexist? [k] (not-every? (partial = k) ks))
(def ks '(:a :b))
(ddf s '(:a :c :d))
(def s '(:a :c :d))
s
ks
(defn ksexist? [k] (not-every? (partial = k) ks))
(ksexist? :a)
(ksexist? :b)
(ksexist? :c)
(defn ksexist? [k] (some partial = k) ks))
(defn ksexist? [k] (some (partial = k) ks))
(ksexist? :c)
(ksexist? :b)
(ksexist? :a)
(ksexist? :d)
(ksexist? nil)
(doc remove)
(remove ksexist? s)
(doc keys)
(seq :f s)
(seq s)
(conj :f s)
(cons :f s)
(use :reload-all 'GeneralTestSuite.basic)
(doc apply)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(doc keys)
(print-cause-trace *e 5)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
e
(require clojure.stacktrace)
(require 'clojure.stacktrace)
e
clojure.stacktrace/e
(clojure.stacktrace/print-cause-trace)
(clojure.stacktrace/print-cause-trace e)
(-main)
(clojure.stacktrace/print-cause-trace e)
(clojure.stacktrace/print-cause-trace *e)
(-main)
(clojure.stacktrace/print-cause-trace *e)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(clojure.stacktrace/print-cause-trace *e)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(clojure.stacktrace/print-cause-trace *e)
(use :reload-all 'GeneralTestSuite.db)
(query-for-order-ids pool-tt-remote 'fbfbfb')
(query-for-order-ids pool-tt-remote 'fbfbfb)
(query-for-order-ids pool-tt-remote "fbfbfb")
(use :reload-all 'GeneralTestSuite.db)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(clojure.stacktrace/print-cause-trace *e)
s
(def s '())
(count s)
(> 0 (count s))
(def s '(1 2))
(> 0 (count s))
(>  (count s) 0)
(def s '())
(>  (count s) 0)
(=  (count s) 0)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main :list-valid)
(-main ':list-valid)
(-main :list-valid)
(-main ':list-valid)
(use :reload-all 'GeneralTestSuite.basic)
(-main :list-valid)
(use :reload-all 'GeneralTestSuite.basic)
(-main :list-valid)
(use :reload-all 'GeneralTestSuite.basic)
(-main :list-valid)
(use :reload-all 'GeneralTestSuite.basic)
(doc defn-)
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(get-full-market-list)
(get-full-market-list :login-remote)
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(get-market-list-by-version 1000)
(get-market-list-by-version :login-remote-test 1000)
(doc format)
(get-market-list-by-version :login-remote-test 1000)
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(get-market-list-by-version :login-remote-test 1000)
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(get-market-list-by-version :login-remote 2000)
(get-market-list-by-version :login-remote-test 2000)
(doc repeatedly)
(doc partial)
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(start-market-list-validation :login-remote-test)
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(start-market-list-validation :login-remote-test)
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(start-market-list-validation :login-remote-test)
(repeatedly (print 'a))
(repeatedly (print "a"))
(repeatedly (partial print "a"))
(take 2 (repeatedly (partial print "a")))
(repeatedly 2 (partial print "a"))
(repeatedly 2 (partial conj [] 2))
(doc range)
(take 100 (range))
(map #(conj [] %) (range 10))
(doc conj)
(conj [] 2)
(conj [1 3] 2)
(doc map)
(map #(conj %1 %2) []  (range 10) )
(doc reduce)
(reduce #(conj [] %)   (range 10) )
(reduce #(conj %1 %2) []  (range 10) )
(doc read-json-str)
(doc json/read-str)
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(doc get)
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(doc get)
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(doc json/read-str)
(doc json/read-json)
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(csjson
;)
;
(doc csjson)
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(class (cheshire.core/parse-string (get-full-market-list :login-remote-test)))
(get (cheshire.core/parse-string (get-full-market-list :login-remote-test)) "ver_num")
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(get (cheshire.core/parse-string (get-full-market-list :login-remote-test)) "ver_num")
(doc cheshire.core/parse-string)
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(get (cheshire.core/parse-string (get-full-market-list :login-remote-test)) "ver_num")
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(start-market-list-validation :login-remote-test)
(get-ver-num (start-market-list-validation :login-remote-test))
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(get-ver-num (get-full-market-list :login-remote-test))
(doc reduce)
(doc recur)
(get-ver-num (get-full-market-list :login-remote-test))
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(recurr-request 0)
(use :reload-all 'GeneralTestSuite.eval.marketpush)
(recurr-request 0)
(start-market-list-validation :login-remote)
(start-market-list-validation :login-remote-test)
(doc swap!)
(def f (ref nil))
(dosync (swap! f #(+ 1 1) ))
(doc alter)
(dosync (alter f #(+ 1 1) ))
(dosync (alter f #(+ 1 1 (if (nil? %) 0) ))
)
(dosync (alter f #(+ 1 1 (if (nil? %) 0) )))
f
@f
(dosync (alter f #(+ 1 1 (if (nil? %) 0 %) )))
(doc merge-with)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(-main)
(doc swap!)
(doc for)
(java.lang.Long/MAX_VALUE)
(* 401 1024)
(/ 1050 401.0)
(/ 1050 401.0 0.1024)
(java.lange.Integer/MAX_VALUE)
(java.lang.Integer/MAX_VALUE)
(/ (* java.lang.Integer/MAX_VALUE 3) 1024)
(/ (* java.lang.Integer/MAX_VALUE 3) 1024.0)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main :order-add)
(-main-all)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(-main :order-add)
(-main-all)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(System/getProperties)
(pprint (System/getProperties))
(pprint (System/getProperty "user.dir"))
(class (System/getProperties))
(-main-all)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
ls
(use :reload-all 'GeneralTestSuite.util)
(request-get www.baiduc.com)
(request-get "www.baiduc.com")
(request-get "http://www.baiduc.com")
(request-get "http://www.google.com")
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(use :reload-all 'GeneralTestSuite.basic)
(time (-main-all))
(use :reload-all 'GeneralTestSuite.basic)
(time (-main-all))
 (doc peek)_
 (doc peek)
(peek [1 2 3])
(peek (take 10 (range)))
(java.util.Date. 1371096000000)
(java.util.Date. 1371177930000)
(java.util.Date. 1371177910000)
(use :reload-all 'GeneralTestSuite.util)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(zipmap [1 2 3] [:a :b :c :d])
(zipmap [:a :b :c :d] [1 2 3])
(doc zipmap)
(zipmap '(:a :b :c :d) '(1 2 3))
(doc bases)
(doc keep)
(doc ->>)
(doc merge)
(doc merge-with)
(doc merge-in)
(doc merge-with)
(doc merge)
(def m {:a 1 :b 2})
(def n {:d 1 :b 2})
(merge m n)
(def n {:d 1 :b 3})
(merge m n)
(doc if-let)_
(doc if-let)
(java.util.Date. 1372219200000)
