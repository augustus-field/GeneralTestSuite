(update-in m [ 2.2 :a] inc)
m
(doc update-in)
(update-in m [:a] inc)
(update-in m [:a :a] inc)
m
(update-in m [1 :a] inc)
(update-in m [3 :a] inc)
(update-in m [2 :a] inc)
(update-in m [1 :a] inc)
(update-in m [0 :a] inc)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.db)
(get-selections)
(query-for-selections )
(pprint (query-for-selections ))
(use :reload-all 'GeneralTestSuite.db)
(pprint (query-for-selections ))
(take 5 (query-for-selections ))
(take 100 (query-for-selections ))
(take 1000000 (query-for-selections ))
(use :reload-all 'GeneralTestSuite.db)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.db)
(take 100 (query-for-selections ))
(-main)
(use :reload-all 'GeneralTestSuite.db)
(take 100 (query-for-selections ))
(use :reload-all 'GeneralTestSuite.db)
(take 100 (query-for-selections ))
(use :reload-all 'GeneralTestSuite.db)
(take 100 (query-for-selections ))
(use :reload-all 'GeneralTestSuite.db)
(take 100 (query-for-selections ))
(use :reload-all 'GeneralTestSuite.db)
(take 100 (query-for-selections ))
(pprint (query-for-selections ))
(use :reload-all 'GeneralTestSuite.db)
(pprint (query-for-selections ))
(use :reload-all 'GeneralTestSuite.db)
(pprint (query-for-selections ))
(pprint (doall (query-for-selections )))
(pprint (query-for-selections ))
(pprint (doall (query-for-selections )))
(use :reload-all 'GeneralTestSuite.db)
(pprint (query-for-selections ))
(use :reload-all 'GeneralTestSuite.db)
(pprint (query-for-selections ))
(use :reload-all 'GeneralTestSuite.db)
(pprint (query-for-selections ))
(use :reload-all 'GeneralTestSuite.db)
(pprint (query-for-selections ))
(use :reload-all 'GeneralTestSuite.db)
(pprint (query-for-selections ))
(doc doall)
(pprint (query-for-selections ))
(use :reload-all 'GeneralTestSuite.db)
(pprint (query-for-selections ))
(use :reload-all 'GeneralTestSuite.db)
(pprint (query-for-selections ))
(use :reload-all 'GeneralTestSuite.db)
(pprint (query-for-selections ))
(use :reload-all 'GeneralTestSuite.db)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(use :reload-all 'GeneralTestSuite.db)
(query-for-selections* pool-tt-remote)
(use :reload-all 'GeneralTestSuite.db)
(pprint tradable-tids)
(if 2 0 1)
(if-not 2 0 1)
(rand-int 1)
(rand-int 2)
(doc rand-int)
(doc inc)
(doc +)
(doc println)
(def s '(a b c d))
(rand-nth s)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.config)
(get-rand-tradable-id :da)
(get-rand-tradable-id )
(GeneralTestSuite.db/query-for-selections pool-tt)
(GeneralTestSuite.db/query-for-selections GeneralTestSuite.db/pool-tt)
(use :reload-all 'GeneralTestSuite.db)
(query-for-selections pool-tt)
(query-for-selections pool-ora)
(query-for-selections pool-tt-remote)
(use :reload-all 'GeneralTestSuite.foresync-test)
(sorted-file-info ".")
(pprint (sorted-file-info "."))
(time (use :reload-all 'GeneralTestSuite.foresync-test))
(realized? (sorted-file-info-future))
(realized? (sorted-file-info-future "."))
(def f (sorted-file-info-future "."))
(realized? f)
(time (use :reload-all 'GeneralTestSuite.db))
(query-for-selections pool-tt)
(query-for-selections pool-ora)
(time (use :reload-all 'GeneralTestSuite.db))
(query-for-selections pool-ora)
(query-for-selections pool-tt)
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(time (use :reload-all 'GeneralTestSuite.config))
(doc use)
(:order-add request-path)
(time (use :reload-all 'GeneralTestSuite.config))
(:order-add request-path)
(:order-add (request-path (:login-local-test login-routes)))
(BigDecimal. "10")
(format "Num: %d" (BigDecimal. "10"))
(doc format)
(format "Num: %d" (BigDecimal. "10"))
(format "Num: %d" (.intValue (BigDecimal. "10")))
(time (use :reload-all 'GeneralTestSuite.config))
(:order-add (request-path (:login-local-test login-routes)))
(format "%d %d %d" '(1 2 3))
(format "%d %d %d" (1 2 3))
(doc format)
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(query-for-selections pool-tt-remote)
(doc rand-nth)
(:login-local-test login-routes)
((:login-local-test login-routes) :use-local-db)
((:login-remote-test login-routes) :use-local-db)
((:login-remote login-routes) :use-local-db)
(get-rand-tradable-id)
(get-rand-tradable-id true)
(get-rand-tradable-id ( (:login-local-test login-routes) :use-local-db))
(get-rand-tradable-id ( (:login-remote login-routes) :use-local-db))
(nil? ( (:login-local-test login-routes) :use-local-db))
(nil? ( (:login-remote login-routes) :use-local-db))
(get-rand-tradable-id ( (:login-remote login-routes) :use-local-db))
(get-rand-tradable-id )
(if ( (:login-remote login-routes) :use-local-db) (println "not-nil") (println "nil"))
(if ( (:login-remote login-routes) :use-local-db) (println "not-nil") (println "is-nil"))
(time (use :reload-all 'GeneralTestSuite.basic))
(get-rand-tradable-id ( (:login-remote login-routes) :use-local-db))
(get-rand-tradable-id (:use-local-db (:login-remote login-routes) ))
(get-rand-tradable-id (:se-local-db (:login-remote login-routes) ))
(doc doall)
(time (use :reload-all 'GeneralTestSuite.basic))
(get-rand-tradable-id (:se-local-db (:login-remote login-routes) ))
(time (use :reload-all 'GeneralTestSuite.basic))
(get-rand-tradable-id (:se-local-db (:login-remote login-routes) ))
(get-rand-tradable-id (:use-local-db (:login-remote login-routes) ))
(get-rand-tradable-id (:se-local-db (:login-remote login-routes) ))
(time (use :reload-all 'GeneralTestSuite.basic))
(get-rand-tradable-id (:se-local-db (:login-remote login-routes) ))
(get-rand-tradable-id (:use-local-db (:login-remote login-routes) ))
 (:use-local-db (:login-remote login-routes) )
 (:use-local-db (:login-remote-test login-routes) )
(get-rand-tradable-id nil)
(get-rand-tradable-id )
(time (use :reload-all 'GeneralTestSuite.basic))
(get-rand-tradable-id )
(get-rand-tradable-id (:use-local-db (:login-remote login-routes) ))
(-main)
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(time (use :reload-all 'GeneralTestSuite.basic))
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(doc request)
(doc request-get)
(source request-get)
(source request-post)
(source client/get)
(source client/request)
(use :reload-all 'GeneralTestSuite.basic)
(doc slurp*)
(doc slurp)
(doc clojure.io/slurp*)
(doc clojure.java.io/as-url)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.config)
(doc request-get)
(doc client/get)
(source client/get)
(client/get "https://google.com")
(pprint (client/get "https://google.com"))
(pprint (client/get "https://localhost:8443/SgfmApi/apiTest.jsp"))
(use :reload-all 'GeneralTestSuite.config)
(pprint (client/get "https://localhost:8443/SgfmApi/apiTest.jsp"))
(pprint (client/get "https://localhost:8443/SgfmApi/apiTest.jsp") {:insecure? true})
(pprint (client/get "https://172.17.108.64:8443/SgfmApi/apiTest.jsp") {:insecure? true})
(pprint (client/get "https://alioth.debian.org" {:insecure? true}))
(use :reload-all 'GeneralTestSuite.util)
(-main)
(pprint (client/get "https://172.17.108.64:8443/SgfmApi/apiTest.jsp") {:insecure? true})
(pprint (client/get "https://localhost:8443/SgfmApi/apiTest.jsp") {:insecure? true})
(doc update-in)
(pprint (client/get "https://localhost:8443") {:insecure? true})
(source client/get)
(pprint (client/get "http://localhost:8080") {:insecure? true})
(pprint (client/get "http://localhost:8080") )
(pprint (client/get "http://localhost:8080"))
(pprint (client/get "http://localhost:8084"))
(pprint (client/get "https://localhost:8443") )
(pprint (client/get "https://localhost:8443") {:insecure? true} )
(dodc reify)
(doc reify)
(pprint (client/get "https://localhost:8443") {:insecure? true} )
(pprint (client/get "https://localhost:8443") {:insecure? false} )
(pprint (client/get "https://localhost:8443") {:insecure? true} )
(pprint (client/get "http://www.yandex.com") {:insecure? true} )
(pprint (client/get "http://www.yandex.com")  )
(pprint (client/get "https://www.google.co.uk")  )
(pprint (client/get "https://localhost:8443") {:insecure? true} )
(use :reload-all 'GeneralTestSuite.util)
(pprint (client/get "https://testks:8443") {:insecure? true} )
(pprint (client/get "https://localhost:8443") {:insecure? true} )
(pprint (client/get "https://localhost:8443" {:insecure? true} ))
(time (use :reload-all 'GeneralTestSuite.util))
(pprint (client/get "https://localhost:8443" ))
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(time (-main))
(doc to-array)
(doc into-array)
(reduce (fn [m [k v]] (assoc m k v))
{} (map vector keys vals))
(doc reduce)
(map [1 2 3] '(a b c) '(d e f))
(doc map)
(map vector '(a b c) '(d e f))
(reduce (fn [m [k v]] (assoc m k v)) {} (map vector '(:a :b :c) (1 2 3)))
(reduce (fn [m [k v]] (assoc m k v)) {} (map vector '(:a :b :c) '(1 2 3)))
(doc interleave)
(interleave '(:a :b) '(1 2))
(doc hash-map)
(hash-map (interleave '(:a :b) '(1 2)))
(apply hash-map (interleave '(:a :b) '(1 2)))
(doc apply)
(hash-map '(1 2))
(hash-map 1 2)
(doc into)
(into {} (map vector '(:a :b :c) (1 2 )))
(into {} (map vector '(:a :b :c) (1 2 3)))
(into {} (map vector '(:a :b :c) '(1 2 3)))
(into {} (map vector '(:a :b :c) '(1 2 )))
(doc zipmap)
(zipmap '(:a :b :c) '(1 2 ))
(zipmap '(:a :b :c) '(1 2 3))
(source zipmap)
(doc promise)
(time (use :reload-all 'GeneralTestSuite.util))
(-main)
(time (use :reload-all 'GeneralTestSuite.util))
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(time (use :reload-all 'GeneralTestSuite.basic))
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(java.util.Date. 1369706124000)
(doc clojure.core)
(:doc clojure.core)
(:doc 'clojure.core)
(doc meta)
(meta clojure.core)
(-main)
(use :reload-all 'GeneralTestSuite.db)
(query-for-order-ids pool-tt 'fbbbcc)
(use :reload-all 'GeneralTestSuite.db)
(query-for-order-ids pool-tt 'fbbbcc)
(query-for-selections pool-tt)
(query-for-order-ids pool-tt 'fbbbcc)
(use :reload-all 'GeneralTestSuite.db)
(query-for-order-ids pool-tt 'fbbbcc)
(use :reload-all 'GeneralTestSuite.db)
(query-for-order-ids pool-tt 'fbbbcc)
(doc map)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(print-cause-trace *e 5)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(query-for-order-ids pool-tt 'fbbbcc)
(rand-nth (query-for-order-ids pool-tt 'fbbbcc))
(class (rand-nth (query-for-order-ids pool-tt 'fbbbcc)))
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(java.util.Date. 1369713484586)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(doc clojure.zip)
(require 'clojure.zip)
(doc clojure.zip)
(doc clojure.zip/zipper)
(doc meta)
(meta clojure.zip/zipper)
(meta clojure.zip)
(source clojure.zip)
(doc replace)
(use :reload-all 'GeneralTestSuite.db)
(query-for-match-ids pool-tt)
(use :reload-all 'GeneralTestSuite.config)
(get-rand-matchid pool-tt)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(doc ~=)
(doc =)
(doc !)
(doc not=)
(def s '(:a :b))
(doc contains?)
(contains? s :a)
(contains? s ':a)
s
(contains? s 1)
(doc remove)
(remove (partial = :a) s)
(defn rmkey [key coll] (remove (partial = key) coll))
(rmkey :a s)
(defn keys '(:a :b))
(def keys '(:a :b))
(def ks '(:a :b))
(def s '(:a :b :c :d))
s
ks
(doc reduce)
(doc remove)
(remove rmkey s)
(doc every)
(doc every?)
(defn ksexist? [k] (every? (partial = k) ks))
(ksexist? :a)
(doc some?)
(defn ksexist? [k] (not-every? (partial = k) ks))
(def ks '(:a :b))
(ddf s '(:a :c :d))
(def s '(:a :c :d))
s
ks
(defn ksexist? [k] (not-every? (partial = k) ks))
(ksexist? :a)
(ksexist? :b)
(ksexist? :c)
(defn ksexist? [k] (some partial = k) ks))
(defn ksexist? [k] (some (partial = k) ks))
(ksexist? :c)
(ksexist? :b)
(ksexist? :a)
(ksexist? :d)
(ksexist? nil)
(doc remove)
(remove ksexist? s)
(doc keys)
(seq :f s)
(seq s)
(conj :f s)
(cons :f s)
(use :reload-all 'GeneralTestSuite.basic)
(doc apply)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(doc keys)
(print-cause-trace *e 5)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
e
(require clojure.stacktrace)
(require 'clojure.stacktrace)
e
clojure.stacktrace/e
(clojure.stacktrace/print-cause-trace)
(clojure.stacktrace/print-cause-trace e)
(-main)
(clojure.stacktrace/print-cause-trace e)
(clojure.stacktrace/print-cause-trace *e)
(-main)
(clojure.stacktrace/print-cause-trace *e)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(clojure.stacktrace/print-cause-trace *e)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(clojure.stacktrace/print-cause-trace *e)
(use :reload-all 'GeneralTestSuite.db)
(query-for-order-ids pool-tt-remote 'fbfbfb')
(query-for-order-ids pool-tt-remote 'fbfbfb)
(query-for-order-ids pool-tt-remote "fbfbfb")
(use :reload-all 'GeneralTestSuite.db)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(clojure.stacktrace/print-cause-trace *e)
s
(def s '())
(count s)
(> 0 (count s))
(def s '(1 2))
(> 0 (count s))
(>  (count s) 0)
(def s '())
(>  (count s) 0)
(=  (count s) 0)
(use :reload-all 'GeneralTestSuite.basic)
(-main-all)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
(use :reload-all 'GeneralTestSuite.basic)
(-main)
